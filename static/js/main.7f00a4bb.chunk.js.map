{"version":3,"sources":["lib/Helpers.ts","store/store.ts","components/Matrix/Matrix.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["id","rowCreator","columns","row","i","amount","Math","floor","random","push","isPercentsShown","isCloser","getAverageValues","array","length","sum","j","round","findClosest","target","numberOfClosest","fullArray","flat","arrayWithoutTarget","filter","cell","sort","a","b","closestArray","closest","abs","splice","indexOf","percentsToggle","rowIndex","type","showClosest","getCells","state","cells","getTableFooter","tableFooter","initialState","store","createStore","action","filteredCells","index","number","incrementedCell","find","percentsCells","map","closestCells","forEach","includes","Matrix","dispatch","useDispatch","useSelector","className","key","onClick","increment","onMouseOver","onMouseOut","reduce","acumulator","style","height","Form","useState","rowsInputValue","setRowsInputValue","rowsIsValid","setRowsIsValid","columnsInputValue","setColumnsInputValue","columnsIsValid","setColumnsIsValid","closestInputValue","setClosestInputValue","closestIsValid","setClosestIsValid","rowsAndColumnsValidation","inputValue","Number","onSubmit","e","preventDefault","value","closestValidation","setCells","rows","cellsCreator","name","onChange","opacity","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f00a4bb.chunk.js","sourcesContent":["import { Cell } from '../Interfaces';\n\nlet id = 1;\n\nconst createRandomNumber = () => {\n  return Math.floor(Math.random() * (900) + 100);\n};\n\nexport const rowCreator = (columns: number): Cell[] => {\n  const row = []\n  for (let i = 0; i < columns; i++) {\n    const amount = createRandomNumber()\n    row.push({\n      amount,\n      id: id,\n      isPercentsShown: false,\n      isCloser: false,\n    });\n    id++;\n  }\n\n  return row;\n}\n\n\n\nexport const cellsCreator = (rows: number, columns: number): Cell[][] => {\n  const cells = [];\n\n  for (let i = 0; i < rows; i++) {\n    cells.push(rowCreator(columns))\n  }\n\n  return cells;\n}\n\nexport const getAverageValues = (array: Cell[][]): Cell[] => {\n  let row = [];\n  for (let i = 0; i < array[0].length; i++) {\n    let sum = 0;\n    for (let j = 0; j < array.length; j++) {\n      sum += array[j][i].amount\n    }\n    row.push({\n      amount: Math.round(sum / array.length),\n      id\n    });\n\n    id++;\n  }\n  return row\n};\n\nexport const findClosest = (array: Cell[][], target: Cell, numberOfClosest: number): Cell[] => {\n  const fullArray = array.flat()\n  const arrayWithoutTarget = fullArray.filter(cell => cell.id !== target.id)\n  fullArray.sort((a, b) => a.amount - b.amount);\n  const closestArray: Cell[] = [];\n  \n  while (closestArray.length < numberOfClosest) {\n    let closest = arrayWithoutTarget[0];\n    for (let i = 0; i < arrayWithoutTarget.length; i++) {\n      if (Math.abs(target.amount - arrayWithoutTarget[i].amount) < Math.abs(target.amount - closest.amount)) {\n        closest = arrayWithoutTarget[i];\n      }\n    }\n    arrayWithoutTarget.splice(arrayWithoutTarget.indexOf(closest), 1);\n    closestArray.push(closest);\n  }\n\n  return closestArray\n} \n","import {createStore, AnyAction } from 'redux';\nimport { Cell } from '../Interfaces';\nimport { getAverageValues, findClosest } from '../lib/Helpers';\n\nconst SET_CELLS = 'SET_CELLS';\nconst ADD_ROW = 'ADD_ROW';\nconst REMOVE_ROW = 'REMOVE_ROW';\nconst INCREMENT = 'INCREMENT';\nconst PERCENTS_TOGGLE = 'PERCENTS_TOGGLE';\nconst SET_NUMBER_OF_CLOSEST = 'SET_NUMBER_OF_CLOSEST';\nconst SHOW_CLOSEST = 'SHOW_CLOSEST';\n\nexport const setCells = (cells: Cell[][]) => ({\n  type: SET_CELLS,\n  cells,\n});\nexport const addRow = (row: Cell[]) => ({\n  type: ADD_ROW,\n  row,\n})\nexport const removeRow = (number: number) => ({\n  type: REMOVE_ROW,\n  number,\n})\nexport const increment = (id: number, rowIndex: number) => ({\n  type: INCREMENT,\n  id,\n  rowIndex,\n})\nexport const percentsToggle = (rowIndex: number) => ({\n  type: PERCENTS_TOGGLE,\n  rowIndex,\n})\nexport const showClosest = (target: Cell) => ({\n  type: SHOW_CLOSEST,\n  target,\n})\nexport const setNumberOfClosest = (numberOfClosest: number) => ({\n  type: SET_NUMBER_OF_CLOSEST,\n  numberOfClosest,\n})\n\nexport const getCells = (state: InitialState) => state.cells;\nexport const getTableFooter = (state: InitialState) => state.tableFooter;\n\ntype InitialState = {\n  cells: Cell[][];\n  tableFooter: Cell[];\n  numberOfClosest: number;\n};\n\nconst initialState = {\n  cells: [],\n  tableFooter: [],\n  numberOfClosest: 0,\n};\n\n\n\nconst reducer = (state: InitialState = initialState, action: AnyAction ) => {\n  switch (action.type) {\n    case 'SET_CELLS':\n      return {\n        ...state,\n        cells: action.cells,\n        tableFooter: getAverageValues(action.cells),\n      };\n\n    case 'ADD_ROW':\n      return {\n        ...state,\n        cells: [\n          ...state.cells,\n          action.row,\n        ],\n        tableFooter: getAverageValues([...state.cells, action.row])\n      };\n\n    case 'REMOVE_ROW':\n      const filteredCells = state.cells.filter((row, index) => index !== action.number)\n      return {\n        ...state,\n        cells: filteredCells,\n        tableFooter: getAverageValues(filteredCells),\n      }\n\n    case 'INCREMENT':\n      const cells = [...state.cells]\n      const incrementedCell = cells[action.rowIndex].find(cell => cell.id === action.id);\n      if (incrementedCell) {\n        incrementedCell.amount++;\n      }\n      return {\n        ...state,\n        ...cells,\n        tableFooter: getAverageValues(cells),\n      }\n\n      case 'PERCENTS_TOGGLE':\n        const percentsCells = [...state.cells]\n        percentsCells[action.rowIndex] = percentsCells[action.rowIndex].map(cell => ({\n          ...cell,\n          isPercentsShown: !cell.isPercentsShown\n        }))\n        return {\n          ...state,\n          cells: percentsCells,\n        }\n\n      case 'SET_NUMBER_OF_CLOSEST':\n        return {\n          ...state,\n          numberOfClosest: action.numberOfClosest,\n        }\n\n      case 'SHOW_CLOSEST':\n        const closest = findClosest(state.cells, action.target, state.numberOfClosest);\n        const closestCells = [...state.cells];\n        closestCells.forEach(row => {\n          row.forEach(cell => {\n            if (closest.includes(cell)) {\n              cell.isCloser = !cell.isCloser\n            }\n          })\n        })\n        return {\n          ...state,\n          cells: closestCells,\n        };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCells, getTableFooter, addRow, removeRow, increment, percentsToggle, showClosest } from '../../store/store';\nimport { rowCreator } from '../../lib/Helpers';\n\nimport './Matrix.scss';\n\nexport const Matrix: React.FC = () => {\n  const dispatch = useDispatch();\n  const cells = useSelector(getCells);\n  const tableFooter = useSelector(getTableFooter);\n\n  return (\n    <table className=\"table\">\n      <tbody className=\"table__body\">\n        {cells.map((row, i)=> (\n          <tr className=\"table__row\" key={i}>\n            <td className=\"table__button-wrapper\">\n              <button className=\"table__button-remove\" onClick={() => dispatch(removeRow(i))}>Remove row</button>\n            </td>\n            {row.map(cell => (\n              <td\n                key={cell.id}\n                onClick={() => dispatch(increment(cell.id, i))}\n                onMouseOver={() => dispatch(showClosest(cell))}\n                onMouseOut={() => dispatch(showClosest(cell))}\n                className={cell.isCloser ? 'table__cell table__cell-closest' : 'table__cell'}\n              >\n                <p className=\"table__text\">\n                  {cell.isPercentsShown\n                    ? `${Math.round((cell.amount / row.reduce((acumulator, cell) => acumulator + cell.amount, 0)) * 100)}%`\n                    : cell.amount\n                  }\n                </p>\n                <div\n                  className=\"table__percents\"\n                  style={\n                    cell.isPercentsShown\n                      ? {height: `${Math.round((cell.amount / row.reduce((acumulator, cell) => acumulator + cell.amount, 0)) * 100)}%`}\n                      : {height: \"0\"}\n                  }\n                />\n              </td>\n            ))}\n            <td\n              className=\"table__cell-sum\"\n              onMouseOver={() => dispatch(percentsToggle(i))}\n              onMouseOut={() => dispatch(percentsToggle(i))}\n            >\n              {row.reduce((acumulator, cell) => acumulator + cell.amount, 0)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      <tfoot className=\"table__footer\">\n        <tr className =\"table__row\">\n          {tableFooter.map(cell => (\n            <td key={cell.id} className=\"table__cell-avarange\">\n              {cell.amount}\n            </td>\n          ))}\n          <td className=\"table__button-wrapper\">\n            <button className=\"table__button-new\" onClick={() => dispatch(addRow(rowCreator(cells[0].length)))}>add row</button>\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  )\n}\n\n","import React, {useState, SyntheticEvent} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cellsCreator } from '../../lib/Helpers';\nimport { setCells, setNumberOfClosest } from '../../store/store';\n\nimport './Form.scss';\n\nexport const Form: React.FC = () => {\n  const [rowsInputValue, setRowsInputValue] = useState('');\n  const [rowsIsValid, setRowsIsValid] = useState(true);\n  const [columnsInputValue, setColumnsInputValue] = useState('');\n  const [columnsIsValid, setColumnsIsValid] = useState(true);\n  const [closestInputValue, setClosestInputValue] = useState('');\n  const [closestIsValid, setClosestIsValid] = useState(true);\n  const dispatch = useDispatch();\n\n  const rowsAndColumnsValidation = (inputValue: string) => {\n    if (inputValue && typeof Number(inputValue) === 'number') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const closestValidation = (value:string) => {\n    if (rowsInputValue && columnsInputValue) {\n      if (Number(value) <= Number(rowsInputValue) * Number(columnsInputValue)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  const makeMatrix = (e: SyntheticEvent) => {\n    e.preventDefault()\n\n    if (rowsAndColumnsValidation(rowsInputValue) && rowsAndColumnsValidation(columnsInputValue)) {\n      if (closestValidation(closestInputValue)) {\n        dispatch(setCells(cellsCreator(Number(rowsInputValue), Number(columnsInputValue))))\n        dispatch(setNumberOfClosest(Number(closestInputValue)))\n      } else {\n        setClosestIsValid(false);\n      }\n    } else {\n      setRowsIsValid(false);\n      setColumnsIsValid(false);\n    }\n  }\n\n   return (\n     <form className=\"form\" onSubmit={makeMatrix}>\n       <h1>Matrix Maker</h1>\n       <div className=\"form__input-wrapper\">\n          <label className=\"form__label\">\n            Number of rows\n            <input\n              type=\"text\"\n              name=\"rows\"\n              className=\"form__input\"\n              onChange={(e) => setRowsInputValue(e.target.value)}\n            />\n          </label>\n          <p className=\"form__error\" style={rowsIsValid ? { opacity: '0' } : {opacity: '1'}}>\n            Enter a number of rows\n          </p>\n       </div>\n       <div className=\"form__input-wrapper\">\n          <label className=\"form__label\">\n            Number of columns \n            <input\n              type=\"text\"\n              name=\"columns\"\n              className=\"form__input\"\n              onChange={(e) => setColumnsInputValue(e.target.value)}\n            />\n          </label>\n          <p className=\"form__error\" style={columnsIsValid ? { opacity: '0' } : {opacity: '1'}}>\n            Enter a number of columns\n          </p>\n       </div>\n       <div className=\"form__input-wrapper\">\n          <label className=\"form__label\">\n          Number of closest cells to shown\n            <input\n              type=\"text\"\n              id=\"closest\"\n              className=\"form__input\"\n              onChange={(e) => setClosestInputValue(e.target.value)}\n            />\n          </label>\n          <p className=\"form__error\" style={closestIsValid ? { opacity: '0' } : {opacity: '1'}}>\n            Enter a number of closest cells to shown (min: 1, max: columns * rows)\n          </p>\n       </div>\n       <button className=\"form__button\">Make a matrix</button>\n     </form>\n   )\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getCells } from './store/store';\nimport './App.scss';\n\nimport { Matrix } from './components/Matrix/Matrix';\nimport { Form } from './components/Form/Form';\n\nfunction App() {\n  const cells = useSelector(getCells);\n\n  return (\n    <div className=\"App\">\n      <Form />\n      {\n        cells.length\n          ? <Matrix />\n          : <></>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}